import{W as p}from"./WavDecoder-DNF98GrN.js";const e={context:null,startTime:0,isPlaying:!1,scheduledSources:new Set,abortController:null,fileSampleRate:null,audioBuffer:[],bufferDuration:0,scheduledDuration:0,minBufferDuration:2,criticalBufferDuration:.5,hasStartedPlayback:!1,lastScheduleTime:0,bufferMonitor:null,streamComplete:!1},n={play:document.getElementById("playButton"),stop:document.getElementById("stopButton"),prog:document.getElementById("progressBar"),status:document.getElementById("status"),bufferInfo:document.getElementById("bufferInfo"),bufferText:document.getElementById("bufferText"),bufferFill:document.getElementById("bufferFill")},a={setStatus(t,r=""){n.status.textContent=t,n.status.className=`status ${r}`},showProgress(t=!0){n.prog.hidden=!t},setProgress(t){n.prog.value=t},toggleButtons(t){n.play.disabled=t,n.stop.disabled=!t,n.stop.classList.toggle("hidden",!t)},updateBufferInfo(t,r){n.bufferText.textContent=`Buffer: ${t.toFixed(1)}s`;const s=Math.min(100,t/r*100);n.bufferFill.style.width=`${s}%`,n.bufferFill.classList.remove("critical","warning"),t<e.criticalBufferDuration?n.bufferFill.classList.add("critical"):t<e.minBufferDuration&&n.bufferFill.classList.add("warning")}};async function B(t,r,s,o){const u=await fetch(t,{signal:o});if(!u.ok)throw new Error(`HTTP ${u.status}`);const i=Number(u.headers.get("Content-Length")||0);let l=0;const h=u.body.getReader();for(;;){const{done:b,value:c}=await h.read();if(b)break;l+=c.length,r(c,l,i)}s()}function y(t){e.audioBuffer.push(t),e.bufferDuration+=t.duration,a.updateBufferInfo(e.bufferDuration,e.minBufferDuration),!e.hasStartedPlayback&&e.bufferDuration>=e.minBufferDuration&&(e.hasStartedPlayback=!0,e.startTime=e.context.currentTime+.1,a.setStatus("Playing...","status-playing"),f()),e.hasStartedPlayback&&e.bufferDuration>=e.minBufferDuration&&f()}function f(){for(;e.audioBuffer.length>0&&e.bufferDuration>e.criticalBufferDuration;){const t=e.audioBuffer.shift();e.bufferDuration-=t.duration;const r=e.context.createBufferSource();r.buffer=t,r.connect(e.context.destination);const s=e.context.currentTime;e.startTime<s&&(e.startTime=s+.05),r.start(e.startTime),e.startTime+=t.duration,e.scheduledDuration+=t.duration,r.addEventListener("ended",()=>{e.scheduledSources.delete(r),e.scheduledDuration-=t.duration}),e.scheduledSources.add(r)}a.updateBufferInfo(e.bufferDuration,e.minBufferDuration)}function d({channelData:t,sampleRate:r,samplesDecoded:s}){if(!e.context||!t?.length)return;r&&!e.fileSampleRate&&(e.fileSampleRate=r);const o=e.context.createBuffer(t.length,t[0].length,e.fileSampleRate||e.context.sampleRate);t.forEach((u,i)=>o.copyToChannel(u,i)),y(o)}async function S(t){if(!e.isPlaying)try{e.context=new AudioContext({sampleRate:44100,latencyHint:"interactive"}),e.abortController=new AbortController,e.startTime=0,e.fileSampleRate=null,e.scheduledSources.clear(),e.isPlaying=!0,e.audioBuffer=[],e.bufferDuration=0,e.hasStartedPlayback=!1,e.lastScheduleTime=0,a.toggleButtons(!0),a.showProgress(!0),a.setStatus("Buffering...","status-loading"),a.setProgress(0),a.updateBufferInfo(0,e.minBufferDuration);const r=new p;let s=!1;console.log(`Starting stream fetch for ${t}`),await B(t,(o,u,i)=>{i&&a.setProgress(u/i);const l=r.decode(o);d(l)},()=>{if(!s){s=!0,e.streamComplete=!0;const o=r.flush();o.channelData.length&&d(o),!e.hasStartedPlayback&&e.bufferDuration>0&&(e.hasStartedPlayback=!0,e.startTime=e.context.currentTime+.1,f(),a.setStatus("Playing...","status-playing"))}},e.abortController.signal),a.setStatus("Stream complete","status-playing")}catch(r){r.name!=="AbortError"&&(console.error(r),a.setStatus(`Error: ${r.message}`,"status-error"))}finally{a.showProgress(!1),e.isPlaying||g()}}function m(){e.isPlaying&&(e.isPlaying=!1,e.abortController?.abort(),e.scheduledSources.forEach(t=>{try{t.stop(),t.disconnect()}catch{}}),e.scheduledSources.clear(),e.audioBuffer=[],e.bufferDuration=0,e.scheduledDuration=0,e.hasStartedPlayback=!1,e.streamComplete=!1,g(),a.setStatus("Stopped"),a.updateBufferInfo(0,e.minBufferDuration))}function g(){e.context&&e.context.state!=="closed"&&e.context.close(),e.context=null,a.toggleButtons(!1),a.showProgress(!1)}n.play.addEventListener("click",()=>{S("classical_demo.wav")},{capture:!0});n.stop.addEventListener("click",()=>{m()});window.addEventListener("beforeunload",()=>{e.isPlaying&&m()});
