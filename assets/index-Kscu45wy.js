import{W as f,a as y}from"./WavDecoder-DNF98GrN.js";const h=i=>{if(i===0)return"0 bytes";const e=["bytes","KiB","MiB","GiB"],t=Math.floor(Math.log2(i)/10);return`${(i/Math.pow(1024,t)).toFixed(t===0?0:1)} ${e[t]}`},b=i=>`${(i/1048576).toFixed(1)}`,C=i=>{const e=Math.floor(i/60),t=Math.floor(i%60);return`${e}:${t.toString().padStart(2,"0")}`};class x{constructor(e){this.container=e}clear(){this.container.innerHTML=""}log(e,t="info"){const s=new Date().toLocaleTimeString(),n={info:"text-gray-300",success:"text-green-400",warning:"text-yellow-400",error:"text-red-400"},r=document.createElement("div");r.className=`mb-1 ${n[t]||n.info}`,r.textContent=`[${s}] ${e}`,this.container.appendChild(r),this.container.scrollTop=this.container.scrollHeight}}class A{constructor(){this.startTime=null,this.firstAudioTime=null}reset(){this.startTime=null,this.firstAudioTime=null}markStart(){this.startTime=performance.now()}markFirstAudio(){return!this.firstAudioTime&&this.startTime&&(this.firstAudioTime=performance.now()-this.startTime),this.firstAudioTime}}class w{constructor(){this.elements={},this.metrics=new A,this.decoder=new f,this.audioCtx=null,this.audioQueue=[],this.isPlaying=!1,this.autoplayEnabled=!1,this.currentAudioSource=null,this.init()}init(){this.collectElements(),this.logger=new x(this.elements.logs),this.setupEventListeners(),this.reset(),this.logger.log("Application initialized. Ready for WAV files.","info")}collectElements(){["upload","input","results","fill","reset","progress","ttfa","bytes","samples","speed","format","sampleRate","channels","bitsPerSample","duration","logs","autoplay","stop","controls"].forEach(t=>{this.elements[t]=document.getElementById(t),this.elements[t]||console.warn(`Element with ID '${t}' not found.`)})}setupEventListeners(){this.elements.upload.addEventListener("click",this.handleUploadZoneClick.bind(this)),this.elements.reset.addEventListener("click",this.reset.bind(this)),this.elements.autoplay.addEventListener("change",this.handleAutoplayToggle.bind(this)),this.elements.stop.addEventListener("click",this.stopPlayback.bind(this)),this.elements.input.addEventListener("change",this.handleFileInputChange.bind(this)),["dragover","dragleave","drop"].forEach(e=>{this.elements.upload.addEventListener(e,t=>{t.preventDefault(),t.stopPropagation(),this.elements.upload.classList.toggle("border-blue-400",e==="dragover")})}),this.elements.upload.addEventListener("drop",this.handleFileDrop.bind(this))}handleUploadZoneClick(){this.ensureAudioContext(),this.elements.input.click()}handleAutoplayToggle(e){this.autoplayEnabled=e.target.checked,this.updatePlaybackControlsVisibility(),this.autoplayEnabled&&this.audioQueue.length>0&&!this.isPlaying&&this.playNextChunk()}handleFileInputChange(e){e.target.files.length>0&&(this.handleFile(e.target.files[0]),e.target.value="")}handleFileDrop(e){const t=Array.from(e.dataTransfer.files).find(s=>s.type==="audio/wav"||s.name.toLowerCase().endsWith(".wav"));t&&(this.ensureAudioContext(),this.handleFile(t))}ensureAudioContext(){this.audioCtx||(this.audioCtx=new AudioContext),this.audioCtx.state==="suspended"&&this.audioCtx.resume()}updatePlaybackControlsVisibility(){this.autoplayEnabled&&(this.isPlaying||this.audioQueue.length>0)?this.elements.controls.classList.remove("hidden"):this.elements.controls.classList.add("hidden")}reset(){this.stopPlayback(),this.logger.clear(),this.metrics.reset(),this.decoder.reset(),this.audioQueue=[],this.elements.results.classList.add("hidden"),this.elements.reset.classList.add("hidden"),this.elements.upload.classList.remove("opacity-50","cursor-not-allowed","pointer-events-none"),this.elements.upload.setAttribute("aria-disabled","false"),this.elements.upload.setAttribute("tabindex","0"),this.elements.progress.classList.add("animate-pulse"),this.elements.fill.style.width="0%",["ttfa","bytes","samples","speed","format","sampleRate","channels","bitsPerSample","duration"].forEach(t=>{this.elements[t]&&(this.elements[t].textContent="-")}),this.logger.log("Ready. Drop or select a WAV file.","info")}updateProgress(e){this.elements.fill.style.width=`${Math.min(e*100,100)}%`}updateMetrics(e,t){const s=(performance.now()-this.metrics.startTime)/1e3;this.elements.bytes.textContent=h(e.decodedBytes),this.elements.samples.textContent=t.toLocaleString(),s>0&&(this.elements.speed.textContent=b(e.decodedBytes/s));const n=this.elements.autoplay.nextElementSibling.querySelector("span");n.textContent="Start Playback"}updateAudioInfo(e,t){if(this.elements.format.textContent=y[e.formatTag]||`Unknown (${e.formatTag})`,this.elements.sampleRate.textContent=`${e.sampleRate.toLocaleString()} Hz`,this.elements.channels.textContent=e.channels,this.elements.bitsPerSample.textContent=`${e.bitsPerSample}-bit`,t>0&&e.sampleRate>0){const s=t/e.sampleRate;this.elements.duration.textContent=C(s)}}enqueuePlayback(e,t){if(!this.audioCtx){this.logger.log("AudioContext not initialized, cannot enqueue playback.","error");return}const s=this.audioCtx.createBuffer(e.length,e[0].length,t);for(let n=0;n<e.length;n++)s.copyToChannel(e[n],n);this.audioQueue.push(s),this.autoplayEnabled&&!this.isPlaying&&this.playNextChunk()}playNextChunk(){if(this.audioQueue.length===0){this.isPlaying=!1,this.currentAudioSource=null,this.updatePlaybackControlsVisibility(),this.logger.log("Playback finished.","info");return}this.isPlaying=!0,this.updatePlaybackControlsVisibility();const e=this.audioQueue.shift(),t=this.audioCtx.createBufferSource();t.buffer=e,t.connect(this.audioCtx.destination),t.onended=()=>this.playNextChunk(),t.start(),this.currentAudioSource=t,this.logger.log(`Playing audio chunk (${this.audioQueue.length} chunks remaining).`,"info")}stopPlayback(){this.currentAudioSource&&(this.currentAudioSource.onended=null,this.currentAudioSource.stop(),this.currentAudioSource=null),this.audioQueue=[],this.isPlaying=!1,this.updatePlaybackControlsVisibility(),this.logger.log("Playback stopped.","info")}async handleFile(e){if(!e){this.logger.log("No file selected.","warning");return}this.reset(),this.elements.upload.classList.add("opacity-50","cursor-not-allowed","pointer-events-none"),this.elements.upload.setAttribute("aria-disabled","true"),this.elements.upload.setAttribute("tabindex","-1"),this.elements.results.classList.remove("hidden"),this.logger.log(`Starting to process "${e.name}" (${h(e.size)})`,"info"),this.metrics.markStart();try{await this.processFileStream(e)}catch(t){this.logger.log(`Processing error: ${t.message}`,"error"),this.elements.upload.classList.remove("opacity-50","cursor-not-allowed","pointer-events-none"),this.elements.upload.setAttribute("aria-disabled","false"),this.elements.upload.setAttribute("tabindex","0")}finally{this.elements.progress.classList.remove("animate-pulse"),this.elements.reset.classList.remove("hidden")}}async processFileStream(e){const t=e.stream().getReader();let s=0,n=!1,r=!1;const c=30;let l=performance.now();const u=()=>{this.updateProgress(this.decoder.progress),this.updateMetrics(this.decoder.info,s)};for(;;){const{done:m,value:p}=await t.read();if(m){this.updateProgress(1);try{const o=this.decoder.flush();o?.samplesDecoded>0&&(s+=o.samplesDecoded,this.elements.samples.textContent=s.toLocaleString(),this.enqueuePlayback(o.channelData,this.decoder.info.format.sampleRate));const a=(performance.now()-this.metrics.startTime)/1e3;this.logger.log(`Decoding complete in ${a.toFixed(2)}s. Total samples: ${s.toLocaleString()}`,"success")}catch(o){this.logger.log(`Finalization warning: ${o.message}`,"warning")}break}try{const o=this.decoder.decode(p),a=this.decoder.info;if(a.errors.length)throw this.logger.log(`Decoder critical error: ${a.errors[0].message}. Stopping.`,"error"),t.cancel(),new Error(a.errors[0].message);const d=performance.now();if(d-l>=c&&(u(),l=d,await new Promise(requestAnimationFrame)),o.samplesDecoded>0){if(s+=o.samplesDecoded,!n){const g=this.metrics.markFirstAudio();this.elements.ttfa.textContent=`${g.toFixed(1)}ms`,n=!0}!r&&a.format.sampleRate&&(this.updateAudioInfo(a.format,this.decoder.estimatedSamples),this.logger.log(`Audio Format: ${a.format.channels}ch, ${a.format.sampleRate}Hz, ${a.format.bitsPerSample}-bit`,"info"),r=!0),this.enqueuePlayback(o.channelData,a.format.sampleRate)}}catch(o){throw this.logger.log(`Chunk processing failed: ${o.message}`,"error"),t.cancel(),o}}}}document.addEventListener("DOMContentLoaded",()=>{try{new w}catch(i){console.error("Application initialization failed:",i)}});
